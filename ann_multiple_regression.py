# -*- coding: utf-8 -*-
"""ANN Multiple Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XyUFJzVam4UMN8VM2niJLGrN8fXmbaJo
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

# Load dataset
names=['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','B','LSTAT','MEDV']
url='https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'
df=pd.read_csv(url,delim_whitespace=True,names=names)

df.head(2)

df.shape

df.isnull().sum().sum()

summary=df.describe()

summary.transpose()

#To Scale data from 0 to 1 apply preprocessing Mms!
from sklearn.preprocessing import MinMaxScaler
mc=MinMaxScaler()
scale_df=mc.fit_transform(df)
scale_df

df_sc=pd.DataFrame(scale_df,columns=names)

df_sc.head(2)

df_sc.describe().round()

df_sc.boxplot(figsize=(10,5))
plt.show()

df_sc.head()

x=df_sc.drop('MEDV',axis=1)
x.shape

y=df_sc['MEDV']
y.shape

# train_test_split the data
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=20,random_state=42)
X_train.shape,X_test.shape,y_train.shape,y_test.shape

#import keras
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras import metrics

#first input and first hidden layer
model=Sequential()
model.add(Dense(20,input_dim=13,activation='relu'))
#second hidden layer
model.add(Dense(10,activation='relu'))
#output layer
model.add(Dense(1,activation='linear'))

#compile ANN
model.compile(optimizer='Adam',loss='mean_squared_error',metrics=['accuracy'])

#fit and display the summary
model.fit(X_train,y_train,epochs=1000,verbose=1)

model.summary()

#Testing the test dataset
y_pred=model.predict(X_test)
y_pred

from sklearn.metrics import mean_absolute_error,mean_squared_error,accuracy_score,r2_score

print('MSE:',mean_squared_error(y_test,y_pred))

score=model.evaluate(X_test,y_test,verbose=0)
score[0]

#### Multiple Linear Regression

from sklearn.linear_model import LinearRegression

lr=LinearRegression()

lr.fit(X_train,y_train)

y_pred_lr=lr.predict(X_test)

y_pred_lr

mse=mean_squared_error(y_test,y_pred_lr)
mse

plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
plt.scatter(y_test,y_pred)
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.title("Keras Neural Network Model")

plt.subplot(122)
plt.scatter(y_test, y_pred_lr)
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.title("SKLearn Linear Regression Model")
plt.show()

